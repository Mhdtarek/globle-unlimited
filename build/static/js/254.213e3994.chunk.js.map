{"version":3,"file":"static/js/254.213e3994.chunk.js","mappings":"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","sources":["i18n/locales.ts","components/Message.tsx","components/Guesser.tsx"],"sourcesContent":["import { LanguageName } from \"../lib/country\";\nimport { Locale, LocaleMessages } from \"../lib/locale\";\nimport { English } from \"./messages/en-CA\";\nimport { Spanish } from \"./messages/es-MX\";\n\n// export const LOCALES: LocaleList = {\n//   English: \"English\",\n//   Spanish: \"Spanish\",\n// };\n\nexport const LOCALES = {\n  English: English,\n  Spanish: Spanish,\n};\n\nexport const langNameMap: Record<Locale, LanguageName> = {\n  \"es-MX\": \"NAME_ES\",\n  \"en-CA\": \"NAME_EN\",\n};\n","// import useCheckMobile from \"../hooks/useCheckMobile\";\nimport { isMobile } from \"react-device-detect\";\nimport { answerCountry, answerName } from \"../util/answer\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useContext } from \"react\";\nimport { LocaleContext } from \"../i18n/LocaleContext\";\nimport { langNameMap } from \"../i18n/locales\";\n\ntype Props = {\n  win: boolean;\n  error: any;\n  guesses: number;\n};\n\nexport function Message({ win, error, guesses }: Props) {\n  const { locale } = useContext(LocaleContext);\n\n  let name = answerName;\n  if (locale !== \"en-CA\") {\n    const langName = langNameMap[locale];\n    name = answerCountry[\"properties\"][langName];\n  }\n\n  if (error) {\n    return <p className=\"text-red-700 \">{error}</p>;\n  } else if (win) {\n    return (\n      <p className=\"text-green-800 dark:text-green-300 font-bold \">\n        <FormattedMessage id=\"Game7\" values={{ answer: name }} />\n        <div className=\"grid place-items-center h-screen\">\n        <button\n          className=\"bg-blue-700 hover:bg-blue-900 dark:bg-purple-800 dark:hover:bg-purple-900\n          text-white rounded-md px-8 py-2 block text-base font-medium \n          focus:outline-none focus:ring-2 focus:ring-blue-300 \n          justify-around sm:flex-grow sm:mx-10\"\n          onClick={() => {localStorage.clear();window.location.reload();}}\n          \n          >\n          <FormattedMessage id=\"Stats9\" defaultMessage=\"Next Game\"/>\n        </button>\n      </div>\n\n      </p>\n      \n    );\n  } else if (guesses === 0) {\n    return (\n      <p className=\"text-gray-700 dark:text-gray-400 \">\n        <FormattedMessage id=\"Game3\" />\n      </p>\n    );\n  } else if (guesses === 1) {\n    return (\n      <p className=\"text-gray-700 dark:text-gray-400 \">\n        <FormattedMessage\n          id=\"Game4\"\n          values={{ click: isMobile ? \"tap\" : \"click\" }}\n        />\n      </p>\n    );\n  } else {\n    return <p className=\"text-red-700 \"></p>;\n  }\n}\n","import { FormEvent, useContext, useState } from \"react\";\nimport { Country, LanguageName } from \"../lib/country\";\nimport { answerCountry, answerName } from \"../util/answer\";\nimport { Message } from \"./Message\";\nimport { polygonDistance } from \"../util/distance\";\nimport alternateNames from \"../data/alternate_names.json\";\nimport { LocaleContext } from \"../i18n/LocaleContext\";\nimport { Locale } from \"../lib/locale\";\nimport localeList from \"../i18n/messages\";\nimport { FormattedMessage } from \"react-intl\";\nimport { langNameMap } from \"../i18n/locales\";\nconst countryData: Country[] = require(\"../data/country_data.json\").features;\n\ntype Props = {\n  guesses: Country[];\n  setGuesses: React.Dispatch<React.SetStateAction<Country[]>>;\n  win: boolean;\n  setWin: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport default function Guesser({ guesses, setGuesses, win, setWin }: Props) {\n  const [guessName, setGuessName] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const { locale } = useContext(LocaleContext);\n\n  const langName = langNameMap[locale];\n\n  function findCountry(countryName: string, list: Country[]) {\n    return list.find((country) => {\n      const { NAME, NAME_LONG, ABBREV, ADMIN, BRK_NAME, NAME_SORT } =\n        country.properties;\n\n      return (\n        NAME.toLowerCase() === countryName ||\n        NAME_LONG.toLowerCase() === countryName ||\n        ADMIN.toLowerCase() === countryName ||\n        ABBREV.toLowerCase() === countryName ||\n        ABBREV.replace(/\\./g, \"\").toLowerCase() === countryName ||\n        NAME.replace(/-/g, \" \").toLowerCase() === countryName ||\n        BRK_NAME.toLowerCase() === countryName ||\n        NAME_SORT.toLowerCase() === countryName ||\n        country.properties[langName].toLowerCase() === countryName\n      );\n    });\n  }\n\n  // Check territories function\n  function runChecks() {\n    const trimmedName = guessName\n      .trim()\n      .toLowerCase()\n      .replace(/&/g, \"and\")\n      .replace(/^st\\s/g, \"st. \");\n    const oldNamePair = alternateNames.find((pair) => {\n      return pair.old === trimmedName;\n    });\n    const userGuess = oldNamePair ? oldNamePair.real : trimmedName;\n    const alreadyGuessed = findCountry(userGuess, guesses);\n    if (alreadyGuessed) {\n      setError(localeList[locale][\"Game6\"]);\n      return;\n    }\n    const guessCountry = findCountry(userGuess, countryData);\n    if (!guessCountry) {\n      setError(localeList[locale][\"Game5\"]);\n      return;\n    }\n    if (guessCountry.properties.NAME === answerName) {\n      setWin(true);\n    }\n    return guessCountry;\n  }\n\n  function addGuess(e: FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    setError(\"\");\n    let guessCountry = runChecks();\n    if (guessCountry && answerCountry) {\n      guessCountry[\"proximity\"] = polygonDistance(guessCountry, answerCountry);\n      setGuesses([...guesses, guessCountry]);\n      setGuessName(\"\");\n    }\n  }\n\n  return (\n    <div className=\"mt-10 mb-6 block mx-auto text-center\">\n      <form\n        onSubmit={addGuess}\n        className=\"w-80 flex space-x-4 mx-auto my-2 justify-center\"\n      >\n        <input\n          className=\"shadow px-2 py-1 md:py-0\n          text-gray-700 dark:bg-slate-300 focus:outline-none \n          focus:shadow-outline disabled:bg-slate-400\n          border rounded disabled:border-slate-400\n          w-full\"\n          type=\"text\"\n          name=\"guesser\"\n          id=\"guesser\"\n          value={guessName}\n          onChange={(e) => setGuessName(e.currentTarget.value)}\n          disabled={win}\n          placeholder={guesses.length === 0 ? localeList[locale][\"Game1\"] : \"\"}\n          autoComplete=\"new-password\"\n        />\n        <button\n          className=\"bg-blue-700 dark:bg-purple-800 hover:bg-blue-900 dark:hover:bg-purple-900 disabled:bg-blue-900  text-white \n          font-bold py-1 md:py-2 px-4 rounded focus:shadow-outline \"\n          type=\"submit\"\n          disabled={win}\n        >\n          <FormattedMessage id=\"Game2\" />\n        </button>\n      </form>\n      <Message win={win} error={error} guesses={guesses.length} />\n    </div>\n  );\n}\n"],"names":["langNameMap","English","Spanish","Message","win","error","guesses","locale","useContext","LocaleContext","name","answerName","langName","answerCountry","className","id","values","answer","onClick","localStorage","clear","window","location","reload","defaultMessage","click","isMobile","countryData","require","Guesser","setGuesses","setWin","useState","guessName","setGuessName","setError","findCountry","countryName","list","find","country","properties","NAME","NAME_LONG","ABBREV","ADMIN","BRK_NAME","NAME_SORT","toLowerCase","replace","onSubmit","e","preventDefault","guessCountry","trimmedName","trim","oldNamePair","alternateNames","pair","old","userGuess","real","localeList","runChecks","polygonDistance","type","value","onChange","currentTarget","disabled","placeholder","length","autoComplete"],"sourceRoot":""}