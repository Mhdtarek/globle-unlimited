{"version":3,"file":"static/js/249.4503150d.chunk.js","mappings":"8OAgBA,SAASA,EAAeC,GACtB,OAAO,OAAIA,GAAWC,MAAK,SAACC,EAAGC,GAC7B,OAAID,EAAEE,WAAWC,OAASC,EAAAA,GAChB,EACCH,EAAEC,WAAWC,OAASC,EAAAA,EACxB,EAEAJ,EAAEK,UAAYJ,EAAEI,aAKd,SAASC,EAAT,GAAkD,IAAlCC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,IAAKC,EAAmB,EAAnBA,SAC3C,GAA4CC,EAAAA,EAAAA,UAASb,EAAeU,IAApE,eAAOI,EAAP,KAAuBC,EAAvB,KACQC,GAAWC,EAAAA,EAAAA,YAAWC,EAAAA,GAAtBF,OAKFG,EAJ4C,CAChD,QAAS,UACT,QAAS,WAEkBH,IAE7BI,EAAAA,EAAAA,YAAU,WACRL,EAAkBf,EAAeU,MAChC,CAACA,IAOJ,IAAMW,EAAYV,EAAM,SAAW,UAQnC,IAbkBW,EAaZC,EAAUT,EAAe,GACzBU,EAAWV,EAAeA,EAAeW,OAAS,GAExD,OACE,iBAAKC,UAAU,6CAAf,UACGZ,EAAeW,OAAS,IACvB,cAAGC,UAAU,OAAb,UACE,uBAAIL,OAGR,eAAIK,UAAU,wCAAd,SACGZ,EAAea,KAAI,SAACC,EAAOC,GAC1B,MAAyCD,EAAMvB,WAAvCyB,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,OAAQzB,EAA1B,EAA0BA,KACpB0B,GADN,EAAgCC,MACV,IAAIC,oBACtBC,EAAOL,GAAY,GAAKC,EAASzB,EAKrC,MAJe,UAAXU,IACFmB,EAAOP,EAAMvB,WAAWc,KAIxB,yBACE,oBACEiB,QAAS,SAACC,GAAD,OA5BvB,SAAuBA,EAAmBR,GACxC,IAAMS,EAAiBxB,EAAee,GAChCU,GAASC,EAAAA,EAAAA,GAAWF,IAC1BG,EAAAA,EAAAA,GAAUF,EAAQ3B,GAyBU8B,CAAcL,EAAGR,IACjCH,UAAU,mCAFZ,WAIE,gBACEiB,IAAG,kCAA6BX,EAAKY,cAAlC,QACHC,IAAKV,EACLT,UAAU,MAEZ,iBAAMA,UAAU,eAAhB,SAAgCS,QAV3BN,QAgBdN,GAAWC,IACV,gBAAKE,UAAU,OAAf,UACE,0BACE,SAAC,IAAD,CAAkBoB,GAAG,UADvB,MAnDUxB,EAoDkC,OAACC,QAAD,IAACA,OAAD,EAACA,EAASf,WAnDjDc,EAAI,KACLyB,QAAQ,GAAGC,QAAQ,wBAAyB,MAiDhD,gB,kEC1FH,SAASR,EAAWS,GACzB,IAAQC,EAASD,EAATC,KACR,UAAiCA,EAAjC,GAAOC,EAAP,KAAaC,EAAb,KAAmBC,EAAnB,KAGA,MAAO,CAACC,KAFQF,EADhB,MAC+B,EAERG,KADJJ,EAAOE,GAAQ","sources":["components/List.tsx","util/centre.ts"],"sourcesContent":["import { SyntheticEvent, useContext, useEffect, useState } from \"react\";\nimport { GlobeMethods } from \"react-globe.gl\";\nimport { Country, LanguageName } from \"../lib/country\";\nimport { answerName } from \"../util/answer\";\nimport { findCentre } from \"../util/centre\";\nimport { turnGlobe } from \"../util/globe\";\nimport { LocaleContext } from \"../i18n/LocaleContext\";\nimport { Locale } from \"../lib/locale\";\nimport { FormattedMessage } from \"react-intl\";\n\ntype Props = {\n  guesses: Country[];\n  win: boolean;\n  globeRef: React.MutableRefObject<GlobeMethods>;\n};\n\nfunction reorderGuesses(guessList: Country[]) {\n  return [...guessList].sort((a, b) => {\n    if (a.properties.NAME === answerName) {\n      return -1;\n    } else if (b.properties.NAME === answerName) {\n      return 1;\n    } else {\n      return a.proximity - b.proximity;\n    }\n  });\n}\n\nexport default function List({ guesses, win, globeRef }: Props) {\n  const [orderedGuesses, setOrderedGuesses] = useState(reorderGuesses(guesses));\n  const { locale } = useContext(LocaleContext);\n  const langNameMap: Record<Locale, LanguageName> = {\n    \"es-MX\": \"NAME_ES\",\n    \"en-CA\": \"NAME_EN\",\n  };\n  const langName = langNameMap[locale];\n\n  useEffect(() => {\n    setOrderedGuesses(reorderGuesses(guesses));\n  }, [guesses]);\n\n  function formatKm(m: number) {\n    const km = m / 1000;\n    return km.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n\n  const qualifier = win ? \"Answer\" : \"Closest\";\n\n  function turnToCountry(e: SyntheticEvent, idx: number) {\n    const clickedCountry = orderedGuesses[idx];\n    const coords = findCentre(clickedCountry);\n    turnGlobe(coords, globeRef);\n  }\n\n  const closest = orderedGuesses[0];\n  const farthest = orderedGuesses[orderedGuesses.length - 1];\n\n  return (\n    <div className=\"md:ml-10 md:mr-0 py-8 dark:text-white z-30\">\n      {orderedGuesses.length > 0 && (\n        <p className=\"my-1\">\n          <b>{qualifier}</b>\n        </p>\n      )}\n      <ul className=\"grid grid-cols-3 md:grid-cols-4 gap-3\">\n        {orderedGuesses.map((guess, idx) => {\n          const { NAME_LEN, ABBREV, NAME, FLAG } = guess.properties;\n          const flag = (FLAG || \"\").toLocaleLowerCase();\n          let name = NAME_LEN >= 10 ? ABBREV : NAME;\n          if (locale !== \"en-CA\") {\n            name = guess.properties[langName];\n          }\n\n          return (\n            <li key={idx}>\n              <button\n                onClick={(e) => turnToCountry(e, idx)}\n                className=\"flex items-center cursor-pointer\"\n              >\n                <img\n                  src={`https://flagcdn.com/w20/${flag.toLowerCase()}.png`}\n                  alt={name}\n                  className=\"\"\n                />\n                <span className=\"ml-2 text-md\">{name}</span>\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n      {closest && farthest && (\n        <div className=\"mt-8\">\n          <p>\n            <FormattedMessage id=\"Game8\" />: {formatKm(closest?.proximity)} km\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n","import { Country } from '../lib/country';\n\nexport function findCentre(country: Country) {\n  const { bbox } = country;\n  const [lng1, lat1, lng2, lat2] = bbox;\n  let latitude = (lat1 + lat2) / 2;\n  const longitude = (lng1 + lng2) / 2;\n  return {lat: latitude, lng: longitude};\n}\n\n\n"],"names":["reorderGuesses","guessList","sort","a","b","properties","NAME","answerName","proximity","List","guesses","win","globeRef","useState","orderedGuesses","setOrderedGuesses","locale","useContext","LocaleContext","langName","useEffect","qualifier","m","closest","farthest","length","className","map","guess","idx","NAME_LEN","ABBREV","flag","FLAG","toLocaleLowerCase","name","onClick","e","clickedCountry","coords","findCentre","turnGlobe","turnToCountry","src","toLowerCase","alt","id","toFixed","replace","country","bbox","lng1","lat1","lng2","lat","lng"],"sourceRoot":""}